Activity组件
是一种可以包含用户界面的组件，主要用于和用户进行交互。
onCreate 函数中的 setContentView(R.layput.activity_main);是加载布局，其中activity_main是布局的名字
startActivity(new Intent(Intent.ACTION_VIEW,uri,parse("http://jikexueyuan.com")));//跳转到极客学院的页面
activity的生存周期
onCreate()
在activity第一次被创建的时候调用，在这个方法中完成activity的初始化操作，比如加载布局和绑定事件等。
onStart()
在activity由不可见变为可见的时候调用
onResume()
在activity准备好和用户进行交互的时候调用
onPause()
活动失去焦点，但是没有完全消失。另一个获得焦点的活动尺寸不够大，无法完全覆盖这个活动。
onStop()
在活动完全不可见的时候调用
onDestroy()
在活动被销毁之前调用，之后的活动状态将变为销毁状态
onRestart()
在活动由停止状态变为运行状态之前调用，也就是活动被重新启动了。
=========安卓录音api===============
File dir = new File(mDir);
if(!dir.exists())
dir.mkdirs();
String fileName = generateFileName();
File file  = new File(dir,filename);

mMediaRecorder = new MediaRecorder();
mMediaRecorder.setOutputFile(file.getAbsolutePath());
//设置音频源为麦克风
mMediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);
mMediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.AMR_NB);//api 10以上使用AMR_NB，以下使用RAW_AMR
mMediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB);
mMediaRecorder.prepare();
mMediaRecorder.start();

public int getVoiceLevel(int maxLevel)
{
	if(isPrepared)
	{
	//mMediaRecorder.getMaxAmplitude() 1-32767
	    return maxLevel*mMediaRecorder.getMaxAmplitude()/32768 + 1;
	}
	return 1;
}
private String generateFileName()
{
	return UUID.randomUUID().toString()+".amr";
}
public void release()
{
	mMediaRecorder.stop();
	mMediaRecorder.release();
	mMediaRecorder  = null;
}
=====================
发送通知的时候，如果连续发送多条，但是只显示一条，比如：http://univasity.iteye.com/blog/1390445
1. 创建PendingIntent的时候：PendingIntent pendingIntent = PendingIntent.getActivity(context, id, intent, 0); 参数中的id，对于多个消息要用不同的值，这样才能保证每个消息对应的Intent的值不同 ，否则如果显示三条通知，点击后只会显示同样的数据。

2. NotificationManager.notify(id, Notification); 这里如果连个id一样，只会显示一条消息。

显示3条通知，如果杀掉app 那么用了以上方法后点击每一条通知都会得到相应的通知内容，但是如果app在后台就不会显示正确的通知内容。
http://blog.csdn.net/harryweasley/article/details/46557827
原生安卓中解决app在后台但是获取不同通知的内容失败的问题的方案：
@Override
 protected void onNewIntent(Intent intent) {
     super.onNewIntent(intent);
     if (intent != null) {
         Bundle bundle1 = intent.getExtras();
         String text = bundle1.getString("message");
         Log.e(TAG, "=========zf=======onNewIntent result==" + text);
         setIntent(intent);
         getIntent().putExtras(intent);
     }
 }


Ti下获取intent中的内容
var activity = Ti.Android.currentActivity;
var intent = activity.getIntent();
var dialog = Ti.UI.createAlertDialog({
			title: 'Push received',
			message: intent.getStringExtra("zf_data"),
			buttonNames: ['View','Cancel'],
			cancel: 1
});
dialog.show();	

ti中我们遇到的问题是如果app在后台就不会显示正确的通知内容，而且如果后台的页面不是mainactivity 那么也会得不到通知的内容。
我们的解决方案是检测app是否活着，如果活着就在生成pendingIntent的时候 发送广播，然后在页面接受广播来获取通知的内容。





































