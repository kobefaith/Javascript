Java编程基础
JVM java虚拟机   JDK java开发工具包    JRE java运行时环境
JDK包含JRE JRE包含JVM
开发环境的搭建
java文件的后缀名是.java
编译字节码用javac  HelloWorld.java
编译后出现的字节码文件是 HelloWorld.class
然后运行字节码文件
java  HelloWorld     执行字节码文件的时候不能加.class后缀名，加上后会报错
IDE开发：创建工程 创建包  在包中添加源代码
在 Java 的领域里，基本数据类型变量存的是数据本身，而引用类型变量存的是保存数据的空间地址。
final double PI = 3.14 常量定义
定义数组
int[] scores = new int[5];
 或者
 int[] scores={78,49,91,68};
使用array方法
import java.util.Arrays;
String[] hobbys = { "sports", "game", "movie" };
        
// 使用Arrays类的sort()方法对数组进行排序
Arrays.sort(hobbys);
int[] nums = new int[]{25,7,126,53,14,86};
Array.toString(nums);

数组循环的foreach方法
int[] scores = { 89, 72, 64, 58, 93 };  
// 使用foreach遍历输出数组中的元素
for ( int score :scores  ) {
	System.out.println(score);
}
二维数组：
int[][] num=new int[2][3];
// 定义两行三列的二维数组并赋值
names={{"tom","jack","mike"},{"zhangsan","lisi","wangwu"}};
          
// 通过二重循环输出二维数组中元素的值
for (int i = 0; i < names.length ; i++) {
     
	for (int j = 0; j < names[i].length; j++) {
         
		System.out.println(names[i][j]);
	}
     
	System.out.println();
}
变量与数据类型
boolean类型如果作为变量占用4个字节，如果作为数组元素占用1个字节

构造方法与类名相同，分为无参构造方法和有参构造方法

public class Telphone{
float screen;
float cpu;
	public Telphone(){
	   System.out.println("无参的构造方法执行了");
	}
	public Telphone(float newScreen,float newCpu){
	    screen = newScreen;
	    cpu = newCpu;
	    System.out.println("有参的构造方法执行了");

	}
}
java中成员变量初始值会被赋值为0，局部变量的初始值不会被赋值为0
Java 中被 static 修饰的成员称为静态成员或类成员。它属于整个类所有，而不是某个对象所有，
即被类的所有对象所共享。静态成员可以使用类名直接访问，也可以使用对象名进行访问。
当然，鉴于他作用的特殊性更推荐用类名访问~~
public  static int sum() {   
    return (score1+score2);  
}
静态方法中可以直接调用同类中的静态成员，但不能直接调用非静态成员
如果希望在静态方法中调用非静态变量，可以通过创建类的对象，然后通过对象来访问非静态变量。
 在普通成员方法中，则可以直接访问同类的非静态变量和静态变量，
  静态方法中不能直接调用非静态方法，需要通过对象来访问非静态方法。
静态初始化块只在类加载时执行，且只会执行一次，同时静态初始化块只能给静态变量赋值，不能初始化普通的成员变量。
// 初始化块
{ 
	System.out.println("通过初始化块初始化sex");
	sex = "男";
}

// 静态初始化块
static { 
	System.out.println("通过静态初始化块初始化age");
	age = 20;
}
 程序运行时静态初始化块最先被执行，然后执行普通初始化块，最后才执行构造方法。
 封装 继承 多态
 Java中的包
 定义包：package 包名 
 必须放在java源程序的第一行，包名之间可以使用"."隔开。com.imooc.MyClass
 包的使用
 1 可以通过import关键字，在某个文件使用其他文件中的类  import com.imooc.music.MyClass
 不同的包中可以包含名字一样的类。调用的时候通过import不同的包名来区分。
 java中包的命名规范是全小写字母
 加载包下的所有文件com.imooc.*
访问修饰符
private 是只能在本类中使用 ，如果没有修饰符 则默认是在本类和同包中使用。
protected 是在本类 同包和子类中都可以使用， public 是在本类 同包 子类 和其他都可以使用。
内部类（ Inner Class ）就是定义在另外一个类里面的类。与之对应，包含内部类的类被称为外部类。
内部类的主要作用如下：

1. 内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类

2. 内部类的方法可以直接访问外部类的所有数据，包括私有的数据

3. 内部类所实现的功能使用外部类同样可以实现，只是有时使用内部类更方便
public class HelloWorld {
    
    // 内部类Inner，类Inner在类HelloWorld的内部
    public class Inner {
        
		// 内部类的方法
		public void show() {
			System.out.println("welcome to imooc!");
		}
	}
    
	public static void main(String[] args) {
        
        // 创建外部类对象
		HelloWorld hello = new HelloWorld();
        // 创建内部类对象
		Inner i = hello.new Inner();
		//定义了成员内部类后，必须使用外部类对象来创建内部类对象，
		//而不能直接去 new 一个内部类对象，即：内部类 对象名 = 外部类对象.new 内部类( );
        // 调用内部类对象的方法
		i.show();
	}
}
外部类是不能直接使用内部类的成员和方法滴
如果外部类和内部类具有相同的成员变量或方法，内部类默认访问自己的成员变量或方法，、
如果要访问外部类的成员变量，可以使用 this 关键字。如：
public void show() { 
	System.out.println("外部类中的name：" + HelloWorld.this.name );
	System.out.println("内部类中的name：" +  name );
	System.out.println("外部类中的age：" + age);
}
静态内部类
1、 静态内部类不能直接访问外部类的非静态成员，但可以通过 new 外部类().成员 的方式访问 
2、 如果外部类的静态成员与内部类的成员名称相同，可通过“类名.静态成员”访问外部类的静态成员；如果外部类的静态成员与内部类的成员名称不相同，则可通过“成员名”直接调用外部类的静态成员
3、 创建静态内部类的对象时，不需要外部类的对象，可以直接创建 内部类 对象名= new 内部类();
public void show() {
	System.out.println("访问外部类中的score：" + HelloWorld.score );
	System.out.println("访问内部类中的score：" + score);
}
 SInner si = new SInner();
方法内部类就是内部类定义在外部类的方法中，方法内部类只在该方法的内部可见，即只在该方法内可以使用。
由于方法内部类不能在外部类的方法以外的地方使用，因此方法内部类不能使用访问控制符和 static 修饰符。
继承
class Dog extends Animal{
}
继承的初始化顺序：先初始化父类再初始化子类，先初始化对象的属性，再执行构造方法中的初始化。
final关键字可以修饰类 方法 属性和变量
final修饰类，则该类不允许被继承
final修饰方法，则该方法不允许被覆盖
final修饰属性，则该属性不会进行隐式的初始化（如果定义的时候没有初始化，那么系统不会自动进行初始化）或在构造方法中赋值（但只能选其一）
final修饰变量，则该变量的值只能被赋一次值。
super关键字在对象的内部使用，可以代表父类对象。
object 是所有类的父类。
object类中的方法：
toString 方法返回的是对象的哈希码（对象地址字符串）可以重写toString方法表示出对象的属性
equals 方法比较的是对象的引用是否指向同一块内存地址
向下类型转换的时候存在风险，可以使用instanceof来处理
if(animal instanceof Cat){
    Cat cat = (Cat)animal;
}
抽象类
应用场景：
1.在某些情况下，某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法。
2.从多个具有相同特征的类中抽象出一个抽象类，以这个抽象类作为子类的模板，从而避免了子类设计的随意性。
abstract定义抽象类，定义抽象方法，只有声明，不需要实现。包含抽象方法的类是抽象类。抽象类中可以包含普通
的方法，也可以没有抽象方法。
抽象类不能直接创建，可以定义引用变量
public abstract class Telphone{
     public abstract  void call();
	 public abstract void message();//抽象类没有实现直接用分号结束
}
接口 
类是一种具体实现，而接口定义了某一批类所需要遵守的规范，接口不关心这些类的内部数据，
也不关心这些类里方法的实现细节，它只规定这些类里必须提供某些方法。
接口可以继承多个父类，一个类可以实现一个或多个接口，实现接口使用implements关键字
继承父类实现接口的语法
[修饰符]class  类名 extends 父类 implements 接口1， 接口2 ..... 
接口实现：
package com.imooc;

public  interface IPlayGame { //声明一个接口
	public  void playGame();
}
// 接口实现
package com.imooc;

public class Psp implements IPlayGame {

	@Override
	public void playGame() {
		// TODO Auto-generated method stub
		System.out.println("可以玩游戏");
	}

}

package com.imooc;

public class SmartPhone extends Telphone implements IPlayGame{
    @Override
	public void playGame() {
		// TODO Auto-generated method stub
		System.out.println("可以玩游戏");
	}
}


IPlayGame ip1 = new SmartPhone();
ip1.playGame();
IPlayGame ip2 = new Psp();
ip2.playGame();

======================
使用接口：
在接口的使用过程当中，还经常与匿名内部类配合使用
方式1：
IPlayGame ip3 = new IPlayGame(){
	public void playGame(){
	    System.out.println("使用匿名内部类的方式实现接口");
	}
}；//一定要加上分号
ip3.playGame();

方式2：
new IPlayGame(){
	public void playGame(){
	    System.out.println("使用匿名内部类的方式实现接口2");
	}
}.playGame();  //调用的时候加上.





























