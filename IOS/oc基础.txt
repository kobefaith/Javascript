OC 兼容c语音，oc源文件的后缀是.m ，oc与c++混写的源文件的后缀是.mm
类的定义
@interface SimpleClass :NSObject
@end
类的属性声明
@interface Person:NSObject
@property NSString *firstName;
@property MSString *lastName;
@end

@property NSNumber *yearOfBirth;
@property int yearOfBirth;
@property (readonly) NSString *firstName;

减号方法（普通方法又称对象方法）声明
@interface Person:NSObject
-(void)someMethod;
-(void)someMethodWithValue:(SomeType)value;
@end
加号方法（类方法，又称静态方法）声明
@interface Person:NSObject

+(id)string;
+(id)stringWithString:(NSString *)aString;
@end

类的实现
#import "XYZPerson.h"
@implementation XYZPerson
-(void)sayHello{
    NSLog(@"Hello,World");
}
@end
 id是万能数据类型
 int main(int argc,const char *argv[]){
     @autoreleasepool{
	    int i = 0;
		a:
		  i++;
		  NSLog(@"i 的值是%d",i);
		  if(i<5) goto a;
	 }
 }

 oc中的继承
int main(int argc,const char *argv[]){
   @autoreleasepool{
    /*
	 [类名  方法名]
	 [对象名  方法名]
	 alloc  为对象分配内存空间
	 init  进行初始化操作
	*/
       People *p1 = [[People alloc ]init];
	   People *p3 = [People new];
	   NSLog(@"p1 - %p",p1);//打印指针的地址
   }
   return 0;
   
}
类内使用成员变量，类外使用属性
@interface People :NSObject
{ 
     NSString *_peopleName;
	 int _peopleAge;
	 int _peopleSex;

}
//属性为了让类外可以访问成员变量
//属性就是成员变量的外部接口
@property(nonatomic,strong)NSString *peopleName;//声明属性
老版本的xcode中需要加上 @synthesize peopleName = _peopleName ,这样才能实现属性和成员变量的绑定，新版本不需要。

@end
如果没有属性的话要访问成员变量要这样
-(void)setName:(NSString *)name
{
    _peopleName = name;
}
-(NSString *)getName
{
    return _peopleName;
}
调用的时候这样
People *p1 = [[People alloc ]init];
[p1 setName:@"李四"];
NSLog(@"peopleName - %@",[p1 getName]);

@interface People :NSObject
/*
  1 声明方法
  -代表对象方法 ,用对象名来调用
  +代表类方法，用类名来调用
  加号方法和减号方法可以互相调用，当然需要类名和实例化变量
  加号方法不能调用成员变量
  2 (int) 函数的返回值类型
  3 :(int)x 代表有参数 int是参数类型  x是参数名
  4:函数名 及时去掉函数类型、去掉参数类型、去掉参数名剩下的部分，包括冒号
  showWithA: andB:
*/
- (void) report;
+ (void) report1;
- (int) showWithA:(int)a;
- (int) showWithA:(int)a andB:(int)b ;
@end
@implementation People
static NSString *_peopleName1;
- (void) report
{
    NSLog(@"-号report");
	//_peopleName = @"123";
}
+ (void) report1
{
    NSLog(@"+号:report1");
	//无法调用成员变量，只能调用静态变量
	_peopleName1 = @"张三";
}
- (int)showWithA:(int)a
{
    return a;
}
- (int)showWithA:(int)a andB:(int)b
{
    return a+b;
}
@end
调用 
People *p1 = [[People alloc ]init];
[p1 report];
[People report1];//用类名来调用类方法

int a1 = [p1 showWithA:10];
int a2 = [p1 showWithA:10 andB:20];
初始化方法
-(id) init;
-(instancetype)init; //两种方法都可以instancetype是与当前类一样的类型，id
方法有些时候回出现错误，所以一般用instancetype方法。
-(instancetype)init
{
   self = [super init];
   if(self){
       _peopleName = @"Visitor";
	   _peopleAge = 30;
   }
   return self;
}
自定义初始化方法
-(instancetype) initWithPeopleName:(NSString *)peopleName andPeopleAge:(int)peopleAge
{
   self = [super init];
   if(self)
   {
       _peopleName = peopleName;
	   _peopleAge = peopleAge;
   }
   return self;
}
成员变量访问修饰符的问题
默认是受保护
公有：在类内类外都可以使用并且可以被继承
受保护：在类内可以使用，在类外无法调用并且可以被继承。
私有：类内可以使用，类外无法调用并且不可以被继承。
框架权限：在框架内相当于受保护，在框架外相当于私有。
@public 
int _classInt;
在类外使用的时候 要用mc->_classInt = 100;//不能使用点 mc._classInt。
@private
@protected
@package
方法没有访问修饰符，如果不想让类外调用方法，可以不在.h中写声明，只在.m中写实现。
继承
oc中没有多继承，要实现多继承要使用协议
#import "MyClass.h"
@interface MySubClass : MyClass  //继承
父类中的私有变量我们是无法继承使用的
如果父类的方法中使用了私有变量，而我们子类继承了父类的这个方法，那私有变量的操作以及打印我们是可以看到的
但是我们不可以在子类中直接调用私有变量。
.h文件中没有声明的方法不能在类外使用，也不能被继承。
多态，OC中不支持方法重载

@interface BlackPrinter : Printer

@end
@implementation BlackPrinter 
-(void)print
{
  [super print];//调用父类方法
  [self print];//调用当前类方法，这样会导致死循环
  NSLog(@"黑白打印机");
}
@end
NSLog(@"Hello %@",name);%@表示打印的是NS对象 比如NSObject NSString等。
Printer *printer = [ColorPrinter alloc] init];
[printer print];//父类指针指向子类对象，调用子类的方法
==================================极客学院笔记===========================================
int main(int argc,char * argv[])
{
    NSString *str = [NSString stringWithFromat:@"Hello %d",100];//OC 方法调用
	NSLog(@"%@",str);
}
oc中可以使用include 来引入c语音的头文件，也可以使用import来引入c语音的头文件
iOS appDelegate 生命周期
◆- (void)applicationWillResignActive:(UIApplication *)application

说明：当应用程序将要入非活动状态执行，在此期间，应用程序不接收消息或事件，比如来电话了

◆- (void)applicationDidBecomeActive:(UIApplication *)application

说明：当应用程序入活动状态执行，这个刚好跟上面那个方法相反

◆- (void)applicationDidEnterBackground:(UIApplication *)application

说明：当程序被推送到后台的时候调用。所以要设置后台继续运行，则在这个函数里面设置即可

◆- (void)applicationWillEnterForeground:(UIApplication *)application

说明：当程序从后台将要重新回到前台时候调用，这个刚好跟上面的那个方法相反。

◆- (void)applicationWillTerminate:(UIApplication *)application

说明：当程序将要退出是被调用，通常是用来保存数据和一些退出前的清理工作。这个需要要设置UIApplicationExitsOnSuspend的键值。

◆- (void)applicationDidReceiveMemoryWarning:(UIApplication *)application

说明：iPhone设备只有有限的内存，如果为应用程序分配了太多内存操作系统会终止应用程序的运行，在终止前会执行这个方法，通常可以在这里进行内存清理工作防止程序被终止

◆- (void)applicationSignificantTimeChange:(UIApplication*)application

说明：当系统时间发生改变时执行

◆- (void)applicationDidFinishLaunching:(UIApplication*)application

说明：当程序载入后执行

◆- (void)application:(UIApplication)application willChangeStatusBarFrame:(CGRect)newStatusBarFrame

说明：当StatusBar框将要变化时执行

◆- (void)application:(UIApplication*)application willChangeStatusBarOrientation:

(UIInterfaceOrientation)newStatusBarOrientation

duration:(NSTimeInterval)duration

说明：当StatusBar框方向将要变化时执行

◆- (BOOL)application:(UIApplication*)application handleOpenURL:(NSURL*)url

说明：当通过url执行

◆- (void)application:(UIApplication*)application didChangeStatusBarOrientation:(UIInterfaceOrientation)oldStatusBarOrientation

说明：当StatusBar框方向变化完成后执行

◆- (void)application:(UIApplication*)application didChangeSetStatusBarFrame:(CGRect)oldStatusBarFrame

说明：当StatusBar框变化完成后执行

oc中的协议、
IPeople.h中定义协议
#import <Foundation/Foundation.h>

@protocol IPeople <NSObject>

-(int)getAge;
-(NSString*)getName;

@end
man.h中
@interface Man : NSObject<IPeople>{
    int _age;
}

-(id)init;
-(NSString*)getName;
-(int)getAge;

@property id<ManDelegate> delegate;

@end

man.m中实现协议
@implementation Man
-(int)getAge{
    return 40;
}

-(NSString*)getName{
    return @"ZhangSan";
}


@end

http://www.jianshu.com/p/a4d519e4e0d5

http://blog.csdn.net/libaineu2004/article/details/45913363

http://blog.csdn.net/jiangwei0910410003/article/details/41923401

http://www.jianshu.com/p/2de9c776f226

http://blog.csdn.net/totogo2010/article/details/8013316

http://blog.csdn.net/totogo2010/article/details/8010231

http://www.jianshu.com/p/4dfca35144cb

http://www.jianshu.com/p/7e02fa48d7bc

http://www.tuicool.com/articles/MNjamm







































