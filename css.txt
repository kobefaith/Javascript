<p style="font-size:1.6em;color:green;">字体大小 1.6 em</p>
css背景
p{
   width:150px;
   padding:10px;
   background-color:aquq;
}
p{
   width:200px;
   background-image:url("123.jpg");
   background-repeat:no-repeat;   //不允许重复
   background-position:left top;top是指图片的顶部
   background-position:100px 100px；
background-attachment:fixed;图片不随内容滚动
}
文本
p{
color:red;
text-align:left;//对齐
text-indent:2em; //缩进 
text-transform:capitalize;首字母大写   lowercase小写
}
css3提供的文本特效
p{
    text-shadow:10px 10px 2px #FFcc00;//增加文字的阴影，距离左边的距离  距离右边的距离  阴影清晰度 和 颜色
    width：100px;
    text-wrap:normal;//自动换行
}
css字体
p{
font-size:40px;
font-family:fantasy;
}
链接
链接的四种状态：
a:link - 普通的、未被访问的链接
a:visited - 用户已访问的链接
a:hover - 鼠标指针位于链接的上方
a:active - 链接被点击的时刻
a:link {
      color:#FF0000;
      text-decoration:none;
}		/* 未被访问的链接 */
a:visited {color:#00FF00;}	/* 已被访问的链接 */
a:hover {color:#FF00FF;}	/* 鼠标指针移动到链接上 */
a:active {color:#0000FF;}	/* 正在被点击的链接 */
列表
ul li{
    list-style-image:url("icon1.gif");为列表添加图片
}
表格
#tb,tr,th,td{
border:1px solid blue;
text-align:center;//设置内容居中显示
}
#tb{
width：400px;
height:400px;
border-collapse:collapse;//合并边框
}
#tb th{
text-align:right;
background-color:aqua;
}
轮廓
p{
outline-color:aqua;  //设置轮廓颜色
outline-style:dotted;//设置轮廓的线型
}
css常用操作
对齐
.div{
width:70%;
height:1000px;
background-color:red;
margin-left:auto;//居中对齐
margin-right:auto;

position:absolute;  //绝对布局，距离左边0px；
left:0px;

float:left //向左对齐  三种水平对齐方式 
    
margin:100px auto;//上下是100px  左右居中
}
分类
 p{
width:400px;
line-height:normal;
}
p{
width:400px;
line-height:200%;
}
p{
cursor:cell;//把鼠标显示设置成加号
}
导航栏
ul{
list-style-type:none;//去掉无序列表前面的点
magrin:0px;
padding:0px;
}
a:link,a:visited{
font-weight:bold;//把文字变粗
text-decoration:none;//去掉下划线
display:block;  //显示为块状元素
background-color:burlywood;
color:aliceblue;
width:50px;
text-align:center;
}
a:active,a:hover{
background-color:crimson;
}
li{
  display:inline; //显示为水平导航栏
padding:3px;
padding-left:5px;
padding-right:5px;
}
图片
.image{
border:1px solid darkgray;
width:auto;
height:auto;
float:left;
text-align:center;
}
img{
margin:5px;
opacity:0.5//半透明的效果
}
.text{
font-size:12px;
magin-bottom:5px;
}
css选择器
h1,h2{
    //选择器分组
} 
类选择器
 结合元素选择器
 <div>123</div>
 <a class="div">jikexueyuan</a>
a.div{
color:red;
} 
多类选择器
<div class="p1">123</div>
<div class="p1">123</div>
<div class="p1 p2">123</div>
.p1{
color:red;
}
.p2{
fint-size:3px;
}
.p1.p2{
font-style:normal;//既拥有前面的样式也拥有自己定义的样式
}
id选择器与类选择器的区别：
ID只能在文档中使用一次，而类选择器可以使用多次。
id选择器不能结合使用。
当使用js时候，需要用到id
属性选择器
<style>
[title]{
color:aqua;
}
[href="http://www.google.com"]{
color:red;
}
[title~="title"]{//选择值中有title的属性
color:red;
}
</style>
<p title="">hello</p>
<a href="http://www.google.com">谷歌</a>
属性的值必须一样。
<p title="tit">hello</p>
<p title="title">hello</p>//根据属性的值进行匹配
<p title="t">hello</p>  
<p title="title hello">hello</p>  //根据属性的值进行匹配
后代选择器
<p>this is an <strong>web<i>hello</i></strong>site</p>
p strong i{
color:red;
}
p i{//不经过strong也能找到i
color:red;
}
子元素选择器，与后代选择器不同，子元素只能选择某元素的子元素，而不能选择孙元素等
<p>this is an <strong>web</strong>site</p>
p>strong{
color:red;
}
相邻兄弟选择器
可选择紧接在另一个元素后的元素，而且两者有相同的父级元素。
<div>
   <ul>
       <li>item1</li>
       <li>item2</li>
       <li>item3</li>
   </ul>
</div>
li+li{
font-size:50px;
color:red;
}//后面两个的样式发生改变，选择的是邻接在li元素后的li元素
css定位
改变元素在页面上的位置
css的定位机制：
普通流：元素按照其在html中的位置顺序决定排布的过程
position属性
#position1{
width:100px;
height:100px;
background-color:blue;
position:absolute;//绝对布局，会覆盖其他的元素，相当于在其他元素的上层
position:relative;//相对布局，会跟其他元素同层，位置相对偏移。
left:20px;
top:20px;
position:fixed;//指定位置后，不随鼠标滚动。
left:20px;
top:20px;
position:static;//设置成static后，不受偏移量的影响
z-index:2;//使用relative或 absolute的时候 会出现覆盖，这时
使用z-index可以来决定哪个元素在上面，谁的值大 谁呈现在前面
}
absolute
    生成绝对定位的元素，相对于值不为 static的第一个父元素进行定位。
  fixed （老IE不支持）
    生成绝对定位的元素，相对于浏览器窗口进行定位。
  relative
    生成相对定位的元素，相对于其正常位置进行定位。
  static
    默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right z-index 声明）。
  inherit
    规定从父元素继承 position 属性的值。
position:absolute(表示绝对定位)，
这条语句的作用将元素从文档流中拖出来，
然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。
如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。
left:100px;
top:50px;
实现div元素相对于浏览器窗口向右移动100px，向下移动50px。

position:relative（表示相对定位），
它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。
相对定位完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，
然后相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，
偏移前的位置保留不动。也就是说后面的元素并不会覆盖以前的位置。
left:100px;
top:50px;
相对于以前位置向下移动50px，向右移动100px;
float 浮动布局
#fd{
width:100px;
height:100px;
background-color:red;
float:left;//靠近窗口的左边，如果有几个元素都是left，那么他们将会依次排布
}
#text{
clear:left;//去掉向左浮动
}
盒子模型
内边距 padding
td{
padding-left:100px;
padding-right:100px;
}
边框
p{
   border-style:dotted;
   border-top-style:double;
   border-right-style:dotted;
   border-width:10px;
   border-top-width:10px;
   border-color:red;
   border-left-color:blue;
}
css3提供的边框效果
p{
border-radius:10px;//圆角边框
}
.cssid{
box-shadow:10px 10px 5px #FFccFF;   //阴影向右移动10px 向下移动10px 透明度是5px 颜色是 #FFccFF
}
border-image 边框图片
p
{
  border:5px solid red;
}
外边距
.mg{
margin:100px;
margin-bottom:100px;
}
如果a元素设置了 margin  b元素也设置了margin，那么a和b元素的margin会合并成数值大的那一个。
css3动画
2d 3d转换
转换是使元素改变形状、尺寸和位置的一种效果。
2d转换方法
translate()
rotate()
scale()
skew()
matrix()
3d转换方法
rotateX()
rotateY()
.div2{
    transform:translate(200px,100px);//元素移动效果
    -webkit-transform:translate(200px,100px);/*safari chrome*/
    -ms-transform:translate(200px,100px);/*IE*/
    -o-transform:translate(200px,100px);/*opera*/
    -moz-transform:translate(200px,100px);/*firefox*/
}
.div2{
    transform:rotate(200deg);//元素旋转效果
    -webkit-transform:rotate(200deg);/*safari chrome*/
    -ms-transform:rotate(200deg);/*IE*/
    -o-transform:rotate(200deg);/*opera*/
    -moz-transform:rotate(200deg);/*firefox*/
}
.div2{
    transform:scale(1,2);//宽度是1倍，高度是2倍
    -webkit-transform:scale(1,2);/*safari chrome*/
    -ms-transform:scale(1,2);/*IE*/
    -o-transform:scale(1,2);/*opera*/
    -moz-transform:scale(1,2);/*firefox*/

}
.div2{
    transform:skew(20deg,20deg);//x轴倾斜20度 y轴倾斜20度
    -webkit-transform:skew(20deg,20deg);/*safari chrome*/
    -ms-transform:skew(20deg,20deg);/*IE*/
    -o-transform:skew(20deg,20deg);/*opera*/
    -moz-transform:skew(20deg,20deg);/*firefox*/

}
.div2{
transform:rotateX(120deg);
 -webkit-transform:rotateX(120deg);
}
css3过渡
CSS3 过渡
通过 CSS3，我们可以在不使用 Flash 动画或 JavaScript 的情况下，
当元素从一种样式变换为另一种样式时为元素添加效果。
过渡是元素从一种样式装换成另一种样式
transition 设置四个过渡属性
div{
width:100px;
height:100px;
background-color:blue;
-webkit-transition:width 2s,height 2s,-webkit-transform 2s;
transition:width 2s,height 2s,transform 2s;
-webkit-transition-delay:2s;//设置动画延时执行
transition-delay:2s;
}
div:hover{
width:200px;
height:200px;
transform:rotate(360deg);
-webkit-transform:rotate(360deg);
}
transition 属性是一个简写属性，用于设置四个过渡属性：
transition-property
transition-duration
transition-timing-function
transition-delay
transition: property duration timing-function delay;

transition-property	规定设置过渡效果的 CSS 属性的名称。
transition-duration	定义过渡效果花费的时间。默认是 0。
transition-timing-function	规定过渡效果的时间曲线。默认是 "ease"。
transition-delay	规定过渡效果何时开始。默认是 0。
css3动画
div{
   width:100px;
   height:100px;
   background-color:red;
   position:relative;
   animation:anim 5s infinite alternate;    //指定动画的名字叫anmi 时间是5秒 加上infinite alternate后会一直循环
   -webkit-animation:anim 5s infinite alternate;
}
@keyframes anmi{    //用百分比来规定变化发生的时间
   0%{background:red;left:0px;top:0px}
   25%{background:blue;left:200px;top:0px}
   50%{background:#ccffcc;left:200px;top:200px}
   75%{background:#00ffff;left:0px;top:200px}
   100%{background:red;left:0px;top:0px}
}
@-webkit-keyframes anmi{
   0%{background:red;left:0px;top:0px}
   25%{background:blue;left:200px;top:0px}
   50%{background:#ccffcc;left:200px;top:200px}
   75%{background:#00ffff;left:0px;top:200px}
   100%{background:red;left:0px;top:0px}
}
css3多列
.div1{
   column-count:4;
   -webkit-column-count:4;
   -webkit-column-gap:30px;
   column-gap:30px;
   column-rule:5px outset #FF0000;
   -webkit-column-rule:5px outset #FF0000;
}
瀑布流：宽度等宽 但高度不一样的 图片排列方式
.container{
   column-width:250px;
   -webkit-column-width:250px;
   -webkit-column-gap:5px;
   column-gap:5px;
}
.container div{
   width:250px;
   margin:5px 0;
}
CSS3新增伪类有那些？
 举例：
    p:first-of-type 选择属于其父元素的首个 <p> 元素的每个 <p> 元素。
    p:last-of-type  选择属于其父元素的最后 <p> 元素的每个 <p> 元素。
    p:only-of-type  选择属于其父元素唯一的 <p> 元素的每个 <p> 元素。
    p:only-child        选择属于其父元素的唯一子元素的每个 <p> 元素。
    p:nth-child(2)  选择属于其父元素的第二个子元素的每个 <p> 元素。

    :after          在元素之前添加内容,也可以用来做清除浮动。
    :before         在元素之后添加内容
    :enabled        
    :disabled       控制表单控件的禁用状态。
    :checked        单选框或复选框被选中。

纯css画一个三角形
把上、左、右三条边隐藏掉（颜色设为 transparent）
#demo {
  width: 0;
  height: 0;
  border-width: 20px;
  border-style: solid;
  border-color: transparent transparent red transparent;
}
css权重
以下是权重的规则：标签的权重为1，class的权重为10，id的权重为100，以下例子是演示各种定义的权重值：

/*权重为1*/
div{
}
/*权重为10*/
.class1{
}
/*权重为100*/
#id1{
}
/*权重为100+1=101*/
#id1 div{
}
/*权重为10+1=11*/
.class1 div{
}
/*权重为10+10+1=21*/
.class1 .class2 div{
}

如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现

水平居中
如果需要居中的元素为常规流中inline元素，为父元素设置text-align: center;即可实现
如果需要居中的元素为常规流中block元素，1）为元素设置宽度，
2）设置左右margin为auto。3）IE6下需在父元素上设置text-align: center;,再给子元素恢复需要的值
如果需要居中的元素为浮动元素，1）为元素设置宽度，2）position: relative;，
3）浮动方向偏移量（left或者right）设置为50%，4）浮动方向上的margin设置为元素宽度一半乘以-1
.content {
    width: 500px;         /* 1 */
    float: left;

    position: relative;   /* 2 */
    left: 50%;            /* 3 */
    margin-left: -250px;  /* 4 */
    background-color: purple;
}
如果需要居中的元素为绝对定位元素，1）为元素设置宽度，2）偏移量设置为50%，3）偏移方向外边距设置为元素宽度一半乘以-1
.content {
    width: 800px;
    position: absolute;
    left: 50%;
    margin-left: -400px;
    background-color: purple;
}
或者1）为元素设置宽度，2）设置左右偏移量都为0,3）设置左右外边距都为auto
.content {
    width: 800px;
    position: absolute;
    margin: 0 auto;
    left: 0;
    right: 0;
    background-color: purple;
}

垂直居中
.Absolute-Center {  
  height:500px;//设置元素的高度
  margin: auto;  
  position: absolute;  
  top: 0; left: 0; bottom: 0; right: 0;  
}  
如何垂直居中一个浮动元素？

复制代码
// 方法一：已知元素的高宽

#div1{
    background-color:#6699FF;
    width:200px;
    height:200px;

    position: absolute;        //父元素需要相对定位
    top: 50%;
    left: 50%;
    margin-top:-100px ;   //二分之一的height，width
    margin-left: -100px;
    }

//方法二:

  #div1{
    width: 200px;
    height: 200px;
    background-color: #6699FF;

    margin:auto;
    position: absolute;        //父元素需要相对定位
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    }
那么问题来了，如何垂直居中一个<img>?（用更简便的方法。）


#container     //<img>的容器设置如下
{
    display:table-cell;
    text-align:center;
    vertical-align:middle;
}
.什么是Css Hack？ie6,7,8的hack分别是什么？

　　答案：针对不同的浏览器写不同的CSS code的过程，就是CSS hack。
 #test{   
        width:300px;   
        height:300px;   
          
        background-color:blue;      /*firefox*/
        background-color:red\9;      /*all ie*/
        background-color:yellow\0;    /*ie8*/
        +background-color:pink;        /*ie7*/
        _background-color:orange;       /*ie6*/    }  
       :root #test { background-color:purple\9; }  /*ie9*/
       @media all and (min-width:0px){ #test {background-color:black\0;} }  /*opera*/
       @media screen and (-webkit-min-device-pixel-ratio:0){ #test {background-color:gray;} 
}       /*chrome and safari*/
盒子模型是css中一个重要的概念，理解了盒子模型才能更好的排版。
其实盒子模型有两种，分别是 ie 盒子模型和标准 w3c 盒子模型。他们对盒子模型的解释各不相同，先来看看我们熟知的标准盒子模型：
 标准 w3c 盒子模型的范围包括 margin、border、padding、content，并且 content 部分不包含其他部分。
 ie 盒子模型的 content 部分包含了 border 和 pading。
 css 中的box-sizing：border-box 就是选择IE盒子模型
margin:10px 5px 15px 20px;
上外边距是 10px
右外边距是 5px
下外边距是 15px
左外边距是 20px
margin:10px 5px 15px;
上外边距是 10px
右外边距和左外边距是 5px
下外边距是 15px
margin:10px 5px;
上外边距和下外边距是 10px
右外边距和左外边距是 5px
css hack。
原理：利用不同浏览器对CSS的支持和解析结果不一样编写针对特定浏览器样式。常见的hack有1）属性hack。2）选择器hack。3）IE条件注释

IE条件注释：适用于[IE5, IE9]常见格式如下
<!--[if IE 6]>
Special instructions for IE 6 here
<![endif]-->
选择器hack：不同浏览器对选择器的支持不一样
/***** Selector Hacks ******/

/* IE6 and below */
* html #uno  { color: red }

/* IE7 */
*:first-child+html #dos { color: red }

/* IE7, FF, Saf, Opera  */
html>body #tres { color: red }

/* IE8, FF, Saf, Opera (Everything but IE 6,7) */
html>/**/body #cuatro { color: red }

/* Opera 9.27 and below, safari 2 */
html:first-child #cinco { color: red }

/* Safari 2-3 */
html[xmlns*=""] body:last-child #seis { color: red }

/* safari 3+, chrome 1+, opera9+, ff 3.5+ */
body:nth-of-type(1) #siete { color: red }

/* safari 3+, chrome 1+, opera9+, ff 3.5+ */
body:first-of-type #ocho {  color: red }

/* saf3+, chrome1+ */
@media screen and (-webkit-min-device-pixel-ratio:0) {
 #diez  { color: red  }
}

/* iPhone / mobile webkit */
@media screen and (max-device-width: 480px) {
 #veintiseis { color: red  }
}

/* Safari 2 - 3.1 */
html[xmlns*=""]:root #trece  { color: red  }

/* Safari 2 - 3.1, Opera 9.25 */
*|html[xmlns*=""] #catorce { color: red  }

/* Everything but IE6-8 */
:root *> #quince { color: red  }

/* IE7 */
*+html #dieciocho {  color: red }

/* Firefox only. 1+ */
#veinticuatro,  x:-moz-any-link  { color: red }

/* Firefox 3.0+ */
#veinticinco,  x:-moz-any-link, x:default  { color: red  }
属性hack：不同浏览器解析bug或方法
/* IE6 */
#once { _color: blue }

/* IE6, IE7 */
#doce { *color: blue; /* or #color: blue */ }

/* Everything but IE6 */
#diecisiete { color/**/: blue }

/* IE6, IE7, IE8 */
#diecinueve { color: blue\9; }

/* IE7, IE8 */
#veinte { color/*\**/: blue\9; }

/* IE6, IE7 -- acts as an !important */
#veintesiete { color: blue !ie; } /* string after ! can be anything */










